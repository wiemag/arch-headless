#!/usr/bin/bash
# by wm/wiemag/dif, original date 2013-09-09, current release 2014-01-31
#
# ---==== INSTALL ARCH LINUX ON A HEADLESS SERVER ====-------------------------
# Remaster arch.iso image so that it starts automatically.
# Allow an ssh-administered ("blind") installation of a headless server.
#
# Assumptions about the computer system arch linux will be installed on:
# - it boots from a CD/DVD first
# - it is connected to the local network
# Currently, the official installation media start with the ssh daemon down.
#
# v1.06 Kernel release verification corrected for cases like 3.16-1 equal to 3.16.0-1
# v1.13 Modifications resulting from the ISO structure change introduced in 201510.

VERSION=1.16 # 2019-11-29

# Checking if system needs to be rebooted -------
# Necessery if kernel has been updated. Note that e.g. 3.16-1 equals 3.16.0-1.
u=$(uname -r); u=${u/-arch/.};
p=$(pacman -Q linux|cut -d" " -f2)
if [[ $u != $p ]]; then
	echo -e "Kernel installed: ${p}\nKernel running:   $u"
	echo -e "Mounting not possible.\nYour computer needs to be rebooted."
	exit
fi

# Checking missing dependencies -----------------
hash unsquashfs 2>/dev/null || { echo "The squashfs-tools package is needed."; exit;}
hash genisoimage 2>/dev/null || { 	echo -n "'genisoimage' not found."; exit;}
hash md5sum 2>/dev/null || { echo -n "'md5sum' not found. The coreutils package missing"; exit;}
hash awk 2>/dev/null || { echo -n "'The gawk package missing"; exit;}
hash setfont 2>/dev/null || { echo -n "'The kbd package missing"; exit;}

# Checking if run by root -----------------------
#[[ $EUID -ne 0 ]] && { echo "Run this script as the root." 2>&1; exit 1;}

# Declarations and initialisation ---------------
function syno() {
	echo -e "\narch-headless modifies the official arch linux installation"
	echo image to enable passwordless SSH\'ing into the system booted from
	echo -e "the installation media. See man pages (man arch-headless).\n"
}
function flags() {
	echo "  arch.iso  path to arch-install-media.iso"
	echo "            e.g. archlinux-2013.09.01-dual.iso"
	echo "            or /path/to/archlinux-2013.09.01-dual.iso"
	echo "  -a 64     create iso for a 64-bit system (default and only)"
	echo "  -a 32     THIS OPTION IS NO LONGER POSSIBLE/AVAILABLE"
	echo "  -l        copy locale/keybord/font/time-zone settings from host to ISO"
	echo "  -f file|folder"
	echo "            copy file or folder contents into /usr/local/bin folder"
	echo "  -b        break/halt this script to allow manual modification in chroot"
	echo "  -c        give up the halted task (-b) and clean the files"
	echo "  -x        use xz compression for iso instead of gz"
	echo "            (Don't use it if you do not have to. Takes much longer.)"
	echo -e "  -v        show the ${0##*/} version number\n"
}
function usage() {
	echo -e "\n\e[1march-headless [-a 64] [-l] [-f file|folder] [-b] [-x] arch.iso | -c | -h | -v\e[0m\n"
	(( $# )) && flags
}

function basepath () {
	local path p
	path=${1-.}
	[[ -z ${path%%/*} ]] || path="$(pwd)/$path"
	while [[ $path == */./* ]]; do path=${path//\/\.\///}; done
	path=${path//\/\//\/} 		# Remove //
	while [[ "$path" == *..* ]]; do
		p=${path%%\/\.\.*}; p=${p%/*}
		path=${p}${path#*\.\.}
	done
	path=${path%/*} 			# Remove last tier name
	[[ -z $path ]] && path='/'
	echo "$path"
}

function warn_incompatibility () {
	if [[ $1 != $(uname -m) ]]; then
		echo
		echo "+---------------------------------------------------+"
		echo "|  Remember your machine architecture               |"
		echo "|  is different from that of the ISO being created. |"
		echo "+---------------------------------------------------+"
	fi
}

#ARCH='i686'	# 32-bit architecture no longer available in offical ISO
ARCH="x86_64"
BREAK=0 		# If 1, BREAK/HALT the script
CLEAN=0 		# If 1, DO NOT RESUME the script and REMOVE FILES instead.
CP_LOCALE=0 	# If 1, copy locale/keymap/font/time zone configs to ISO.
FILE="" 		# File or folder to be copied to /usr/local/bin/
ROOTFS_SFS='airootfs.sfs'		# in archiso/arch/
ROOTFSD=rootfs-$USER  			# temporary rootfs directory
AIDIR=archISO 		 			# temporary directory
ISO_LABEL="ARCH_$(date +%Y%m)" 	# to avoid an unpleasant surprise
ISO_FNAME=''                    # ISO image file name; Set later in the script
CMDLINE="$0 $@"

# If -b is used, a /mnt/archiso-${USER}-params is created.

# Parse the command line ------------------------
while getopts  ":a:bclf:xhv" flag
do
    case "$flag" in
		h) syno; usage 1; exit;;
		v) echo -e "\n${0##*/} v.${VERSION}"; exit;;
		a) [[ "$OPTARG" -gt 49 ]] && ARCH="x86_64";;
		b) BREAK=1;;
		c) CLEAN=1;;
		l) CP_LOCALE=1;;
		f) FILE="$OPTARG"; if [[ ! -e "$FILE" ]]; then
			echo Current directory: $(pwd)
			echo $FILE does not exist.
			read -p "Ignore this option and continue? (y/N) " Q
			[ ! "${Q,,}" = 'y' ] && exit
		   fi;;
		x) XZ=1;;
	esac
done

# Here we go ------------------------------------
if [[ ! -f /mnt/archiso-${USER}-params ]] # If the script has NOT been run and halted
then
	shift `expr $OPTIND - 1` 	# Remove the options parsed above.
	ISO="$1"		# Path/name of the official arch installation iso image
	((${#ISO})) || { usage 1; echo -e "\e[1mMissing parameter.\e[0m"; exit;}
	if [[ -f "$ISO" ]]; then
		path=$(basepath $ISO) 		# Root (/) based path.
		ISO=${path}/${ISO##*/} 		# Full path file name.
	else
		echo -e "\nFile \e[1m${ISO}\e[0m not found."
		exit
	fi
	if (($CLEAN)); then
		echo "Ignoring the -c flag - no previous-run files found."
		CLEAN=0
	fi

	# START -----------------------------------------

	# Unpack the chosen architecture files from ISO to ./archiso/
	[[ -d "/tmp/$AIDIR" ]] || sudo mkdir "/tmp/$AIDIR"
	(($?)) && exit 1
	(( $(echo $(grep "/tmp/$AIDIR" /etc/mtab)|wc -w) )) || \
		sudo mount -t iso9660 -o loop "$ISO" "/tmp/$AIDIR" 2>/dev/null
	(($?)) && { echo $ISO; echo /tmp/$AIDIR; echo "Mount error"; exit 2;}
	echo -e "\nCopying ${ISO##*/}\n\tto ${path}/archiso"
	mkdir -p "${path}/archiso/arch/boot"
	cp -apr /tmp/$AIDIR/{EFI,isolinux,loader} "${path}/archiso"
	cp -apr /tmp/$AIDIR/arch/{${ARCH},pkglist.${ARCH}.txt} "${path}/archiso/arch"
	cp -apr /tmp/$AIDIR/arch/boot/{syslinux,${ARCH}} "${path}/archiso/arch/boot/"
	find /tmp/$AIDIR/arch/boot/ -maxdepth 1 -type f \
		-exec cp -apr '{}' "${path}/archiso/arch/boot" \;
	sync
	sudo umount /tmp/$AIDIR 		# Not needed any longer
	sudo rm -r /tmp/$AIDIR

	# ----------------
	echo "Modifying archiso/arch/boot/syslinux/archiso.cfg"
	echo -e "\tand archiso/loader/entries/archiso-x86_64.conf to log in automatically."

	sudo echo -e "PROMPT 0\nDEFAULT arch-${ARCH}\nLABEL arch-${ARCH}
	LINUX boot/${ARCH}/vmlinuz\nINITRD boot/${ARCH}/archiso.img
	APPEND archisobasedir=arch archisolabel=${ISO_LABEL}" > \
		"$path"/archiso/arch/boot/syslinux/archiso.cfg

	sudo sed -i "s/archisolabel=ARCH_.*$/archisolabel=${ISO_LABEL}/" "$path"/archiso/loader/entries/archiso-x86_64.conf

	# ----------------
	echo "Unsquashing ...archiso/arch/${ARCH}/${ROOTFS_SFS}"
	echo -e "\tto /mnt/$ROOTFSD."

	[[ -d "/mnt/$ROOTFSD" ]] && sudo rm -r "/mnt/$ROOTFSD"
	sudo unsquashfs -d /mnt/$ROOTFSD "${path}/archiso/arch/${ARCH}/${ROOTFS_SFS}"
	[[ $? -ne 0 ]] && exit

	# ----------------
	echo -e "\nModifying files in /mnt/$ROOTFSD"
	echo -e "\tto enable sshd.service at boot."
	# /usr/lib/systemd/system/sshd.service does exist in arch linux!
	sudo ln -s /usr/lib/systemd/system/sshd.service \
		/mnt/$ROOTFSD/etc/systemd/system/multi-user.target.wants/

	echo "Allowing an empty password"
	echo -e "\tfor ssh'ing into ssh server."
	# Allow empty passwords for sshd
	sudo sed -i 's/#PermitEmpty.*/PermitEmptyPasswords yes/;' /mnt/$ROOTFSD/etc/ssh/sshd_config

	echo "Adding an alias to /etc/zshrc (Author's idiosyncrasy):"
	echo -e "\talias s='systemctl'\n"
	# Add it as the first line in the zshrc configuration file
	sudo sed -i "1s/^/alias s='systemctl'\n/" /mnt/$ROOTFSD/etc/zsh/zshrc
	# Copy locale settings and time zone to ISO
	if ((CP_LOCALE)); then
		echo "Copying time zone and locale settings from host to ISO."
		[[ -f /etc/localtime ]] && \
			sudo cp -d /etc/localtime /mnt/$ROOTFSD/etc/ && \
			echo -e "\tTime zone set ($(readlink -n /etc/localtime))."
		[[ -f /etc/vconsole.conf ]] && \
			sudo cp /etc/vconsole.conf /mnt/$ROOTFSD/etc/ && \
			echo -e "\tvconsole.conf copied:" && \
			awk -v TABS='\t\t' '{$0=TABS$0; print}' /etc/vconsole.conf
		sudo cp /etc/locale.* /mnt/$ROOTFSD/etc/ && \
			echo -e  "\t/etc/locale.* files copied."
		sudo cp /usr/lib/locale/locale-archive /mnt/$ROOTFSD/usr/lib/locale/ && \
			echo -e  "\t/usr/lib/locale/locale-archive copied.\n"
		# FOR A REASON VIRTUAL MACHINE DOES NOT READ FONT_MAP from /ect/vconsole.conf
		# This is a work around
		# Add $SCRIPT to zshrc so that it runs at automatic login.
		SCRIPT="KEYMAP=''; FONT=''; FONT_MAP=''\n
		[[ -f /etc/vconsole.conf ]] && 	source /etc/vconsole.conf\n
		[[ -n \$KEYMAP ]] && loadkeys \$KEYMAP\n
		if [[ -n \$FONT ]]; then\n
			\t[[ -n \$FONT_MAP ]] && setfont \$FONT -m \$FONT_MAP\n
		fi\n"
		cat <(echo -e $SCRIPT) /mnt/$ROOTFSD/etc/zsh/zshrc > zshrc.new && \
			sudo mv zshrc.new /mnt/$ROOTFSD/etc/zsh/zshrc
	fi
	# Copy file or folder contents to ISO's /usr/local/bin folder.
	if [[ -e "$FILE" ]]; then
		echo -n "Copying ${FILE%/}"
		[[ -f "$FILE" ]] && echo && \
			sudo cp "$FILE" /mnt/$ROOTFSD/usr/local/bin/
		[[ -d "$FILE"  ]] && echo '/*' && \
			sudo cp "${FILE%/}"/* /mnt/$ROOTFSD/usr/local/bin/ 2>/dev/null
		echo -e "\tinto ISO's /usr/local/bin/ folder.\n"
	fi

	if (($BREAK)); then
		echo -ne "\e[32m"
		echo "ARCH=$ARCH" | sudo tee /mnt/archiso-${USER}-params
		echo "path=$path" | sudo tee -a /mnt/archiso-${USER}-params
		echo "ISO=$ISO"  #| sudo tee -a /mnt/archiso-${USER}-params
		echo -e "\e[1mScript halted.\e[0m"
		echo You can re-run it without parameters to create an ISO,
		echo or with the flag \'-c\' to abandon the task and clean up.
		echo -e "Unsquashed and modified root file system on\e[1m /mnt/$ROOTFSD\e[0m"
		warn_incompatibility $ARCH
		exit
	fi
else	# Assume that BREAK was used in the previous run, and resume the script.
	 	# Options are ignored if BREAK was used in previous run.
	echo -e "\n\e[32mFile /mnt/$AIDIR-params found."
	if (($CLEAN)); then
		echo -e "The -c flag invoked.\e[0m\n"
	else
		echo "Resuming the halted script with previous parameters."
		echo -e "Ignoring the current parameters.\e[0m"
	fi
	source /mnt/$AIDIR-params 	# Read parameters; Needed for cleanig, too.
	sudo rm /mnt/archiso-${USER}-params
fi

if [[ $CLEAN -eq 0 ]]; then 	# Create a modified iso file
	# Squash rootfs image back
	(($XZ)) && sudo mksquashfs /mnt/$ROOTFSD /tmp/${ROOTFS_SFS} -comp xz ||
		sudo mksquashfs /mnt/$ROOTFSD /tmp/${ROOTFS_SFS}
	(($?)) && echo 3
	sudo mv -f /tmp/${ROOTFS_SFS} "${path}/archiso/arch/${ARCH}/${ROOTFS_SFS}"
	CURDIR="$PWD"
	cd "${path}/archiso/arch/${ARCH}/"
	sudo md5sum "${ROOTFS_SFS}" >"${ROOTFS_SFS%.*}".md5
	cd "$CURDIR"

	# Create a modified arch-installation-media.iso
	ISO_FNAME=arch-${ARCH}-$(date +%Y%m%d-%H%M).iso
	genisoimage -l -r -J -V ${ISO_LABEL} -b isolinux/isolinux.bin \
		-no-emul-boot -boot-load-size 4 -boot-info-table -c isolinux/boot.cat \
		-o "${path}/${ISO_FNAME}" "${path}/archiso"
	(($?)) || { echo -e "\nThe installation ISO image";
		echo -e "\t\e[32;1m${path}/${ISO_FNAME}\e[0m\nhas been created.";
		echo -e "\n*** Run\n\t\e[1misohybrid [OPTIONS] ${ISO_FNAME}\e[0m";
		echo -e "if you want to install the image on a USB drive.\n";}
fi
echo -n "Cleaning... "
sudo rm -rf "${path}/archiso" 	# -f required to remove archiso/isolinux/boot.cat
sudo rm -r /mnt/$ROOTFSD
echo "Done."
